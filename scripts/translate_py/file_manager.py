"""
Gestionnaire de fichiers et m√©tadonn√©es pour le syst√®me de traduction.

Ce module g√®re la lecture/√©criture des fichiers, le calcul des hashes,
la gestion des m√©tadonn√©es de traduction et les op√©rations sur les fichiers.
"""

import hashlib
import json
import shutil
from pathlib import Path
from typing import Dict, List, Optional, Set

import aiofiles

try:
    from .config import TranslationConfig, LANG_CONFIG, get_paths
    from .models import (
        FileType, 
        FileTranslationTask, 
        TranslationMetadata, 
        TranslationStatus
    )
except ImportError:
    from config import TranslationConfig, LANG_CONFIG, get_paths
    from models import (
        FileType, 
        FileTranslationTask, 
        TranslationMetadata, 
        TranslationStatus
    )


class FileHasher:
    """Utilitaire pour calculer les hashes de fichiers."""
    
    @staticmethod
    def compute_file_hash(file_path: Path) -> str:
        """
        Calcule le hash SHA-256 d'un fichier.
        
        Args:
            file_path: Chemin vers le fichier
            
        Returns:
            Hash SHA-256 en hexad√©cimal
        """
        sha256_hash = hashlib.sha256()
        
        with open(file_path, "rb") as f:
            # Lecture par blocs pour les gros fichiers
            for chunk in iter(lambda: f.read(4096), b""):
                sha256_hash.update(chunk)
        
        return sha256_hash.hexdigest()
    
    @staticmethod
    async def compute_file_hash_async(file_path: Path) -> str:
        """
        Calcule le hash SHA-256 d'un fichier de mani√®re asynchrone.
        
        Args:
            file_path: Chemin vers le fichier
            
        Returns:
            Hash SHA-256 en hexad√©cimal
        """
        sha256_hash = hashlib.sha256()
        
        async with aiofiles.open(file_path, "rb") as f:
            while chunk := await f.read(4096):
                sha256_hash.update(chunk)
        
        return sha256_hash.hexdigest()


class FileTypeDetector:
    """D√©tecteur de type de fichier."""
    
    @staticmethod
    def detect_file_type(file_path: Path) -> FileType:
        """
        D√©tecte le type d'un fichier bas√© sur son extension.
        
        Args:
            file_path: Chemin vers le fichier
            
        Returns:
            Type de fichier d√©tect√©
        """
        extension = file_path.suffix.lower()
        
        if extension in LANG_CONFIG.TRANSLATABLE_EXTENSIONS:
            return FileType.MARKDOWN
        elif extension in {'.png', '.png', '.jpeg', '.gif', '.svg'}:
            return FileType.IMAGE
        elif extension in {'.docx', '.pdf'}:
            return FileType.DOCUMENT
        else:
            return FileType.OTHER


class MetadataManager:
    """Gestionnaire des m√©tadonn√©es de traduction."""
    
    def __init__(self, config: TranslationConfig):
        """
        Initialise le gestionnaire.
        
        Args:
            config: Configuration du syst√®me
        """
        self.config = config
        self.paths = get_paths(config)
        self.metadata_file = self.paths['metadata']
    
    async def load_metadata(self) -> TranslationMetadata:
        """
        Charge les m√©tadonn√©es existantes ou cr√©e un nouveau fichier.
        
        Returns:
            M√©tadonn√©es de traduction
        """
        if not self.metadata_file.exists():
            return TranslationMetadata()
        
        try:
            async with aiofiles.open(self.metadata_file, 'r', encoding='utf-8') as f:
                data = await f.read()
                metadata_dict = json.loads(data)
                
                # Migration du format legacy si n√©cessaire
                if isinstance(metadata_dict, dict) and 'files' not in metadata_dict:
                    # Ancien format: fichier -> langue -> hash
                    metadata = TranslationMetadata()
                    metadata.files = metadata_dict
                    return metadata
                
                return TranslationMetadata.parse_obj(metadata_dict)
                
        except (json.JSONDecodeError, ValueError) as e:
            # Fichier corrompu, on recommence
            print(f"Attention: M√©tadonn√©es corrompues ({e}), cr√©ation d'un nouveau fichier")
            return TranslationMetadata()
    
    async def save_metadata(self, metadata: TranslationMetadata) -> None:
        """
        Sauvegarde les m√©tadonn√©es sur disque.
        
        Args:
            metadata: M√©tadonn√©es √† sauvegarder
        """
        # Cr√©ation du dossier parent si n√©cessaire
        self.metadata_file.parent.mkdir(parents=True, exist_ok=True)
        
        # S√©rialisation avec indentation pour lisibilit√©
        json_data = metadata.model_dump_json(indent=2)
        
        async with aiofiles.open(self.metadata_file, 'w', encoding='utf-8') as f:
            await f.write(json_data)


class FileScanner:
    """Scanner de fichiers pour la documentation."""
    
    def __init__(self, config: TranslationConfig):
        """
        Initialise le scanner.
        
        Args:
            config: Configuration du syst√®me
        """
        self.config = config
        self.paths = get_paths(config)
        self.docs_path = self.paths['docs']
        self._excluded_dirs_cache = None
    
    def scan_files(self) -> List[Path]:
        """
        Scanne tous les fichiers dans le dossier docs.
        
        Returns:
            Liste des chemins de fichiers trouv√©s
        """
        if not self.docs_path.exists():
            raise FileNotFoundError(f"Dossier docs non trouv√©: {self.docs_path}")
        
        # Fichiers √† ignorer
        ignore_patterns = {'.DS_Store', 'Thumbs.db', '.gitkeep', '.notranslation'}
        
        files = []
        for file_path in self.docs_path.rglob('*'):
            if (file_path.is_file() and 
                file_path.name not in ignore_patterns and
                not file_path.name.startswith('.')):
                files.append(file_path)
        
        return sorted(files)
    
    def _find_excluded_directories(self) -> Set[Path]:
        """
        Trouve tous les r√©pertoires contenant .notranslation
        
        Returns:
            Set des r√©pertoires √† exclure
        """
        excluded_dirs = set()
        
        # Recherche de tous les fichiers .notranslation
        for notranslation_file in self.docs_path.rglob('.notranslation'):
            if notranslation_file.is_file():
                excluded_dir = notranslation_file.parent
                excluded_dirs.add(excluded_dir)
                
                # Log du r√©pertoire exclu
                relative_path = str(excluded_dir.relative_to(self.docs_path))
                print(f"üö´ R√©pertoire exclu de la traduction: {relative_path or '.'}")
        
        return excluded_dirs
    
    def _is_in_excluded_directory(self, file_path: Path, excluded_dirs: Set[Path]) -> bool:
        """
        V√©rifie si un fichier est dans un r√©pertoire exclu
        
        Args:
            file_path: Chemin du fichier √† v√©rifier
            excluded_dirs: Set des r√©pertoires exclus
            
        Returns:
            True si le fichier est dans un r√©pertoire exclu
        """
        # V√©rification de tous les parents du fichier
        for parent in file_path.parents:
            if parent in excluded_dirs:
                return True
            # Arr√™t quand on atteint le dossier docs
            if parent == self.docs_path:
                break
        
        return False
    
    def get_relative_path(self, file_path: Path) -> str:
        """
        Obtient le chemin relatif par rapport au dossier docs.
        
        Args:
            file_path: Chemin absolu du fichier
            
        Returns:
            Chemin relatif
        """
        return str(file_path.relative_to(self.docs_path))


class TaskBuilder:
    """Constructeur de t√¢ches de traduction."""
    
    def __init__(self, config: TranslationConfig):
        """
        Initialise le constructeur.
        
        Args:
            config: Configuration du syst√®me
        """
        self.config = config
        self.paths = get_paths(config)
        self.file_scanner = FileScanner(config)
        self.file_hasher = FileHasher()
        self.file_detector = FileTypeDetector()
    
    async def build_translation_tasks(
        self,
        target_languages: List[str],
        metadata: TranslationMetadata,
        force_retranslation: bool = False,
        init_mode: bool = False,
        translate_missing: bool = False
    ) -> List[FileTranslationTask]:
        """
        Construit la liste des t√¢ches de traduction.
        
        Args:
            target_languages: Langues cibles
            metadata: M√©tadonn√©es existantes
            force_retranslation: Forcer la retraduction
            init_mode: Mode initialisation
            translate_missing: Traduire les fichiers manquants
            
        Returns:
            Liste des t√¢ches de traduction
        """
        files = self.file_scanner.scan_files()
        
        # Trouve les r√©pertoires avec .notranslation
        notranslation_dirs = self._find_notranslation_directories()
        
        tasks = []
        
        for file_path in files:
            relative_path = self.file_scanner.get_relative_path(file_path)
            file_type = self.file_detector.detect_file_type(file_path)
            
            # V√©rifier si le fichier est dans un r√©pertoire .notranslation
            force_copy = self._is_in_notranslation_directory(file_path, notranslation_dirs)
            if force_copy:
                print(f"üìã Fichier forc√© en copie (r√©pertoire .notranslation): {relative_path}")
            
            # Calcul du hash pour les fichiers traduisibles (m√™me si force_copy)
            current_hash = None
            if file_type == FileType.MARKDOWN:
                current_hash = self.file_hasher.compute_file_hash(file_path)
            
            # Cr√©ation des t√¢ches pour chaque langue
            for lang_code in target_languages:
                lang_name = LANG_CONFIG.LANGUAGES.get(lang_code, lang_code)
                target_path = self._get_target_path(relative_path, lang_code)
                
                # R√©cup√©ration du hash stock√©
                stored_hash = metadata.get_hash(relative_path, lang_code)
                
                # D√©termination si traduction n√©cessaire
                needs_translation = self._needs_translation(
                    file_type=file_type,
                    target_path=target_path,
                    current_hash=current_hash,
                    stored_hash=stored_hash,
                    force_retranslation=force_retranslation,
                    init_mode=init_mode,
                    translate_missing=translate_missing
                )
                
                task = FileTranslationTask(
                    source_path=file_path,
                    relative_path=relative_path,
                    file_type=file_type,
                    target_lang=lang_code,
                    target_lang_name=lang_name,
                    target_path=target_path,
                    current_hash=current_hash,
                    stored_hash=stored_hash,
                    needs_translation=needs_translation,
                    force_copy=force_copy
                )
                
                tasks.append(task)
        
        return tasks
    
    def _find_notranslation_directories(self) -> Set[Path]:
        """
        Trouve tous les r√©pertoires contenant .notranslation
        
        Returns:
            Set des r√©pertoires contenant .notranslation
        """
        notranslation_dirs = set()
        
        # Recherche de tous les fichiers .notranslation
        for notranslation_file in self.paths['docs'].rglob('.notranslation'):
            if notranslation_file.is_file():
                notranslation_dir = notranslation_file.parent
                notranslation_dirs.add(notranslation_dir)
                
                # Log du r√©pertoire en mode copie
                relative_path = str(notranslation_dir.relative_to(self.paths['docs']))
                print(f"üìã R√©pertoire en mode copie (.notranslation): {relative_path or '.'}")
        
        return notranslation_dirs
    
    def _is_in_notranslation_directory(self, file_path: Path, notranslation_dirs: Set[Path]) -> bool:
        """
        V√©rifie si un fichier est dans un r√©pertoire contenant .notranslation
        
        Args:
            file_path: Chemin du fichier √† v√©rifier
            notranslation_dirs: Set des r√©pertoires avec .notranslation
            
        Returns:
            True si le fichier est dans un r√©pertoire .notranslation
        """
        # V√©rification de tous les parents du fichier
        for parent in file_path.parents:
            if parent in notranslation_dirs:
                return True
            # Arr√™t quand on atteint le dossier docs
            if parent == self.paths['docs']:
                break
        
        return False
    
    def _get_target_path(self, relative_path: str, lang_code: str) -> Path:
        """
        Calcule le chemin cible pour un fichier traduit.
        
        Args:
            relative_path: Chemin relatif du fichier source
            lang_code: Code de langue
            
        Returns:
            Chemin cible pour la traduction
        """
        return (self.paths['i18n'] / 
                lang_code / 
                'docusaurus-plugin-content-docs' / 
                'current' / 
                relative_path)
    
    def _needs_translation(
        self,
        file_type: FileType,
        target_path: Path,
        current_hash: Optional[str],
        stored_hash: Optional[str],
        force_retranslation: bool,
        init_mode: bool,
        translate_missing: bool
    ) -> bool:
        """
        D√©termine si un fichier a besoin d'√™tre traduit.
        
        Args:
            file_type: Type de fichier
            target_path: Chemin cible
            current_hash: Hash actuel du fichier source
            stored_hash: Hash stock√© en m√©tadonn√©es
            force_retranslation: Forcer la retraduction
            init_mode: Mode initialisation
            translate_missing: Traduire les fichiers manquants
            
        Returns:
            True si traduction n√©cessaire
        """
        # En mode force, tout est √† traduire
        if force_retranslation:
            return True
        
        # En mode init, on ne traduit que les manquants si demand√©
        if init_mode:
            return translate_missing and not target_path.exists()
        
        # Fichiers non-markdown : copie si manquant
        if file_type != FileType.MARKDOWN:
            return not target_path.exists()
        
        # Fichiers markdown : v√©rification du hash
        if not target_path.exists():
            return True  # Fichier manquant
        
        if stored_hash is None:
            return True  # Pas de hash stock√©
        
        if current_hash != stored_hash:
            return True  # Contenu modifi√©
        
        return False  # √Ä jour


class FileCopier:
    """Gestionnaire de copie de fichiers non-traduisibles."""
    
    @staticmethod
    async def copy_file(source_path: Path, target_path: Path) -> bool:
        """
        Copie un fichier de source vers cible.
        
        Args:
            source_path: Chemin source
            target_path: Chemin cible
            
        Returns:
            True si copie r√©ussie
        """
        try:
            # Cr√©ation du dossier parent
            target_path.parent.mkdir(parents=True, exist_ok=True)
            
            # V√©rification si les fichiers sont identiques
            if target_path.exists():
                if await FileCopier._files_are_identical(source_path, target_path):
                    return True
            
            # Copie du fichier
            if source_path.suffix.lower() == '.docx':
                # Copie sp√©ciale pour les fichiers docx (pr√©servation m√©tadonn√©es)
                shutil.copy2(source_path, target_path)
            else:
                # Copie standard
                shutil.copy(source_path, target_path)
            
            return True
            
        except Exception as e:
            print(f"Erreur lors de la copie {source_path} ‚Üí {target_path}: {e}")
            return False
    
    @staticmethod
    async def _files_are_identical(file1: Path, file2: Path) -> bool:
        """
        V√©rifie si deux fichiers sont identiques.
        
        Args:
            file1: Premier fichier
            file2: Deuxi√®me fichier
            
        Returns:
            True si identiques
        """
        try:
            # Comparaison rapide par taille
            if file1.stat().st_size != file2.stat().st_size:
                return False
            
            # Comparaison par hash
            hash1 = FileHasher.compute_file_hash(file1)
            hash2 = FileHasher.compute_file_hash(file2)
            
            return hash1 == hash2
            
        except Exception:
            return False


class FileManager:
    """Gestionnaire principal des fichiers."""
    
    def __init__(self, config: TranslationConfig):
        """
        Initialise le gestionnaire.
        
        Args:
            config: Configuration du syst√®me
        """
        self.config = config
        self.metadata_manager = MetadataManager(config)
        self.task_builder = TaskBuilder(config)
        self.file_copier = FileCopier()
    
    async def read_file_content(self, file_path: Path) -> str:
        """
        Lit le contenu d'un fichier.
        
        Args:
            file_path: Chemin vers le fichier
            
        Returns:
            Contenu du fichier
        """
        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
            return await f.read()
    
    async def write_file_content(self, file_path: Path, content: str) -> None:
        """
        √âcrit du contenu dans un fichier.
        
        Args:
            file_path: Chemin vers le fichier
            content: Contenu √† √©crire
        """
        # Cr√©ation du dossier parent
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
            await f.write(content)
    
    async def get_file_size(self, file_path: Path) -> int:
        """
        Obtient la taille d'un fichier.
        
        Args:
            file_path: Chemin vers le fichier
            
        Returns:
            Taille en octets
        """
        import os
        stat = os.stat(file_path)
        return stat.st_size
