openapi: 3.0.0
info:
  title: LLMaaS API
  description: |
    API pour accéder aux modèles de langage large (LLM) hébergés sur l'infrastructure Cloud Temple.
    Cette API est compatible avec le standard OpenAI et permet d'accéder à divers modèles
    comme Llama 3.3, Gemma 3, DeepSeek R1, Qwen 2.5, Mistral Small 3.1, et d'autres.

    **Note sur l'authentification :** Toutes les requêtes vers les endpoints `/v1/*` nécessitent une authentification via un token Bearer fourni dans l'en-tête `Authorization`.
  version: 1.0.0
  contact:
    name: Cloud Temple
    url: https://www.cloud-temple.com
  x-logo:
    url: 'https://www.cloud-temple.com/wp-content/uploads/2021/03/logo-cloud-temple.png'
    altText: Cloud Temple Logo

servers:
  - url: https://api.ai.cloud-temple.com # Corrigé en HTTP
    description: Alias DNS pour LB01 (Prod API)
  - url: http://preprod.api.ai.cloud-temple.com # Corrigé en HTTP
    description: Alias DNS pour LB02 (Préprod API)

tags:
  - name: Chat
    description: Endpoints pour les conversations avec les modèles
  - name: Completions
    description: Endpoints pour la génération de texte
  - name: Audio
    description: Endpoints pour le traitement audio (transcription)
  - name: Models
    description: Endpoints pour obtenir des informations sur les modèles disponibles

paths:
  /v1/chat/completions:
    post:
      tags:
        - Chat
      summary: Crée une complétion de chat
      description: |
        Génère une réponse à partir d'une conversation avec le modèle spécifié.
        Supporte le streaming des réponses token par token.
        Nécessite une authentification par token Bearer.
      operationId: createChatCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Réponse de complétion de chat réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                type: string
                description: Flux d'événements pour le streaming des réponses
        '400':
          description: Requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Non autorisé (Token manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Modèle non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Trop de requêtes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service indisponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/completions:
    post:
      tags:
        - Completions
      summary: Crée une complétion de texte
      description: |
        Génère une complétion de texte à partir du prompt fourni avec le modèle spécifié.
        Supporte le streaming des réponses token par token.
        Nécessite une authentification par token Bearer.
      operationId: createCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
      responses:
        '200':
          description: Réponse de complétion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
            text/event-stream:
              schema:
                type: string
                description: Flux d'événements pour le streaming des réponses
        '400':
          description: Requête invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Non autorisé (Token manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Modèle non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Trop de requêtes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service indisponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/audio/transcriptions:
    post:
      tags:
        - Audio
      summary: Transcrit un fichier audio en texte
      description: |
        Envoie un fichier audio au service ASR (basé sur Whisper) pour transcription.
        Le fichier doit être au format WAV, MP3 ou M4A.
        Nécessite une authentification par token Bearer.
      operationId: createTranscription
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Le fichier audio à transcrire (wav, mp3, m4a).
                language:
                  type: string
                  description: La langue de l'audio (code ISO 639-1). Si non spécifié, la langue est détectée automatiquement.
                  example: "fr"
                prompt:
                  type: string
                  description: Un prompt optionnel pour guider la transcription ou corriger le style.
                  example: "Cloud Temple, LLMaaS."
                response_format:
                  type: string
                  enum: [json, text, srt, verbose_json, vtt]
                  description: Le format de la sortie de transcription (géré par le backend ASR).
                  default: json
                temperature:
                  type: number
                  format: float
                  description: La température d'échantillonnage (géré par le backend ASR).
                  default: 0
      responses:
        '200':
          description: Transcription réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
                    description: Le texte transcrit.
        '400':
          description: Requête invalide ex format de fichier non supporté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Non autorisé ex Token manquant ou invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur ex erreur lors de la transcription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service ASR indisponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/models:
    get:
      tags:
        - Models
      summary: Liste tous les modèles disponibles
      description: |
        Retourne la liste de tous les modèles disponibles sur la plateforme LLMaaS,
        avec leurs identifiants, alias et autres métadonnées.
        Nécessite une authentification par token Bearer.
      operationId: listModels
      responses:
        '200':
          description: Liste des modèles disponibles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
        '401':
          description: Non autorisé (Token manquant ou invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ChatCompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: |
            ID du modèle à utiliser. Peut être un nom complet ou un alias.
            Exemples: "llama", "llama-3.3-70b", "gemma", "gemma-3-27b", etc.
          example: "llama"
        messages:
          type: array
          description: Liste des messages de la conversation
          items:
            $ref: '#/components/schemas/ChatMessage'
        stream:
          type: boolean
          description: Si vrai, les réponses seront streamées token par token
          default: false
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 2
          description: Contrôle la créativité des réponses (0 = déterministe, 2 = très créatif)
          default: 0.7
        top_p:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Alternative à la température, utilise l'échantillonnage nucleus
          default: 1
        n:
          type: integer
          minimum: 1
          description: Nombre de complétions à générer
          default: 1
        max_tokens:
          type: integer
          minimum: 1
          description: Nombre maximum de tokens à générer
          default: 1024
        presence_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Pénalité pour les nouveaux tokens basée sur leur présence dans le texte existant
          default: 0
        frequency_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Pénalité pour les nouveaux tokens basée sur leur fréquence dans le texte existant
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: number
          description: Modifie la probabilité de certains tokens
          default: {}
        user:
          type: string
          description: Identifiant unique pour l'utilisateur final
          example: "user-123"
        tools:
          type: array
          description: "Une liste d'outils que le modèle peut appeler. Actuellement, seules les fonctions sont supportées."
          items:
            $ref: '#/components/schemas/Tool'
          nullable: true
        tool_choice:
          oneOf:
            - type: string
              enum: [none, auto, required]
              description: |
                Contrôle si le modèle appelle une fonction.
                `none` signifie que le modèle n'appellera pas de fonction et générera un message.
                `auto` signifie que le modèle peut choisir entre générer un message ou appeler une ou plusieurs fonctions.
                `required` signifie que le modèle doit appeler une ou plusieurs fonctions.
            - type: object
              properties:
                type:
                  type: string
                  enum: [function]
                function:
                  type: object
                  properties:
                    name:
                      type: string
                      description: "Le nom de la fonction spécifique à appeler."
                  required:
                    - name
              required:
                - type
                - function
          description: "Contrôle quel outil, le cas échéant, est appelé par le modèle. Utilisez `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` pour forcer l'appel à une fonction spécifique. Utilisez `auto` pour laisser le modèle choisir. Utilisez `required` pour forcer le modèle à appeler n'importe quelle fonction."
          nullable: true

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant, function]
          description: Rôle du message dans la conversation
        content:
          type: string
          description: Contenu du message
        name:
          type: string
          description: Nom optionnel pour identifier l'auteur du message (utilisé avec role=function)

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
          description: Identifiant unique de la complétion
          example: "chatcmpl-123456789"
        object:
          type: string
          enum: [chat.completion]
          description: Type d'objet retourné
        created:
          type: integer
          description: Timestamp Unix de la création de la complétion
          example: 1677858242
        model:
          type: string
          description: Modèle utilisé pour la complétion
          example: "llama-3.3-70b"
        choices:
          type: array
          description: Liste des complétions générées
          items:
            type: object
            properties:
              index:
                type: integer
                description: Index de la complétion
              message:
                $ref: '#/components/schemas/ChatMessage'
              finish_reason:
                type: string
                enum: [stop, length, content_filter, function_call, null]
                description: Raison de la fin de la génération
        usage:
          $ref: '#/components/schemas/Usage'

    CompletionRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          type: string
          description: |
            ID du modèle à utiliser. Peut être un nom complet ou un alias.
            Exemples: "llama", "llama-3.3-70b", "gemma", "gemma-3-27b", etc.
          example: "llama"
        prompt:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Texte à compléter
          example: "Écrivez un poème sur l'intelligence artificielle"
        stream:
          type: boolean
          description: Si vrai, les réponses seront streamées token par token
          default: false
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 2
          description: Contrôle la créativité des réponses (0 = déterministe, 2 = très créatif)
          default: 0.7
        top_p:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Alternative à la température, utilise l'échantillonnage nucleus
          default: 1
        n:
          type: integer
          minimum: 1
          description: Nombre de complétions à générer
          default: 1
        max_tokens:
          type: integer
          minimum: 1
          description: Nombre maximum de tokens à générer
          default: 1024
        presence_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Pénalité pour les nouveaux tokens basée sur leur présence dans le texte existant
          default: 0
        frequency_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Pénalité pour les nouveaux tokens basée sur leur fréquence dans le texte existant
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: number
          description: Modifie la probabilité de certains tokens
          default: {}
        user:
          type: string
          description: Identifiant unique pour l'utilisateur final
          example: "user-123"

    CompletionResponse:
      type: object
      properties:
        id:
          type: string
          description: Identifiant unique de la complétion
          example: "cmpl-123456789"
        object:
          type: string
          enum: [text_completion]
          description: Type d'objet retourné
        created:
          type: integer
          description: Timestamp Unix de la création de la complétion
          example: 1677858242
        model:
          type: string
          description: Modèle utilisé pour la complétion
          example: "llama-3.3-70b"
        choices:
          type: array
          description: Liste des complétions générées
          items:
            type: object
            properties:
              text:
                type: string
                description: Texte généré
              index:
                type: integer
                description: Index de la complétion
              logprobs:
                type: object
                description: Informations sur les probabilités des tokens
                nullable: true
              finish_reason:
                type: string
                enum: [stop, length, content_filter, null]
                description: Raison de la fin de la génération
        usage:
          $ref: '#/components/schemas/Usage'

    ModelList:
      type: object
      properties:
        object:
          type: string
          enum: [list]
          description: Type d'objet retourné
        data:
          type: array
          description: Liste des modèles disponibles
          items:
            $ref: '#/components/schemas/Model'

    Model:
      type: object
      properties:
        id:
          type: string
          description: Identifiant du modèle (clé d'alias de `config.yaml` si existante, sinon nom racine).
          example: "llama3.3:70b"
        object:
          type: string
          enum: [model]
          description: Type d'objet retourné
        created:
          type: integer
          description: Timestamp Unix de la création du modèle
          example: 1677858242
        owned_by:
          type: string
          description: Propriétaire du modèle
          example: "CloudTemple"
        root:
          type: string
          description: Nom racine technique réel du modèle.
          example: "ibnzterrell/Meta-Llama-3.3-70B-Instruct-AWQ-INT4"
        aliases:
          type: array
          description: Liste des alias non-numériques disponibles pour ce modèle.
          items:
            type: string
          example: ["llama", "llama-3.3-70b", "meta-llama-3.3-70b", "ibnzterrell/Meta-Llama-3.3-70B-Instruct-AWQ-INT4"]
        permission:
          type: array
          description: Permissions associées au modèle
          items:
            type: object
            properties:
              id:
                type: string
                description: Identifiant de la permission
              object:
                type: string
                enum: [model_permission]
                description: Type d'objet retourné
              created:
                type: integer
                description: Timestamp Unix de la création de la permission
              allow_create_engine:
                type: boolean
                description: Autorisation de créer un moteur
              allow_sampling:
                type: boolean
                description: Autorisation d'échantillonnage
              allow_logprobs:
                type: boolean
                description: Autorisation de récupérer les probabilités des tokens
              allow_search_indices:
                type: boolean
                description: Autorisation de rechercher dans les indices
              allow_view:
                type: boolean
                description: Autorisation de voir le modèle
              allow_fine_tuning:
                type: boolean
                description: Autorisation de fine-tuning
              organization:
                type: string
                description: Organisation associée à la permission
              group:
                type: string
                nullable: true
                description: Groupe associé à la permission
              is_blocking:
                type: boolean
                description: Si la permission est bloquante

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Nombre de tokens dans le prompt
          example: 10
        completion_tokens:
          type: integer
          description: Nombre de tokens dans la complétion
          example: 20
        total_tokens:
          type: integer
          description: Nombre total de tokens utilisés
          example: 30

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Message d'erreur
              example: "Le modèle 'unknown-model' n'existe pas"
            type:
              type: string
              description: Type d'erreur
              example: "invalid_request_error"
            param:
              type: string
              nullable: true
              description: Paramètre qui a causé l'erreur
              example: "model"
            code:
              type: string
              nullable: true
              description: Code d'erreur
              example: "model_not_found"

    Tool:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum: [function]
          description: "Le type de l'outil. Actuellement, seul 'function' est supporté."
        function:
          $ref: '#/components/schemas/FunctionObject'

    FunctionObject:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: "Le nom de la fonction à appeler."
        description:
          type: string
          description: "Une description de ce que fait la fonction, utilisée par le modèle pour décider quand et comment appeler la fonction."
          nullable: true
        parameters:
          type: object # JSON Schema object
          description: "Les paramètres que la fonction accepte, décrits comme un objet JSON Schema. Voir https://json-schema.org/understanding-json-schema/"
          nullable: true
          example:
            type: "object"
            properties:
              location:
                type: "string"
                description: "La ville et l'état, par exemple San Francisco, CA"
              unit:
                type: "string"
                enum: ["celsius", "fahrenheit"]
            required:
              - "location"

  securitySchemes:
    BearerAuth: # Renommé pour plus de clarté et conformité
      type: http # Standard OpenAPI pour Bearer
      scheme: bearer # Standard OpenAPI pour Bearer
      bearerFormat: JWT # Optionnel, mais descriptif
      description: |
        Authentification par token Bearer (conforme au script de test).
        Dans le champ d'autorisation qui apparaît (via le bouton "Authorize"),
        collez votre token complet précédé de "Bearer ", par exemple :
        `Bearer VOTRE_TOKEN_COMPLET_ICI`.
        Contactez Cloud Temple pour obtenir un token.

security:
  - BearerAuth: [] # Référence le schéma renommé et applique globalement
