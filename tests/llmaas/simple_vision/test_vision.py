# -*- coding: utf-8 -*-
"""
Exemple simple d'utilisation de l'API Vision de LLMaaS.

Ce script montre comment envoyer une image locale avec une question
√† un mod√®le de vision (multimodal) et afficher sa r√©ponse.
"""
import os
import base64
import httpx
from dotenv import load_dotenv

# --- Configuration ---
# Charger les variables d'environnement depuis un fichier .env
load_dotenv()

API_URL = os.getenv("API_URL", "https://api.ai.cloud-temple.com/v1")
API_KEY = os.getenv("API_KEY")
# Utiliser un mod√®le de vision. llava est un choix courant.
MODEL = os.getenv("DEFAULT_MODEL", "granite3.2-vision:2b")
IMAGE_PATH = "image_example.png" # L'image doit √™tre dans le m√™me r√©pertoire

# --- Fonctions ---

def encode_image_to_base64(image_path: str) -> str:
    """
    Encode une image en base64 pour l'inclure dans la requ√™te API.
    """
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except FileNotFoundError:
        print(f"‚ùå Erreur: Le fichier image '{image_path}' n'a pas √©t√© trouv√©.")
        return ""
    except Exception as e:
        print(f"‚ùå Erreur lors de l'encodage de l'image: {e}")
        return ""

def generate_example_image():
    """
    G√©n√®re une image simple pour le test si elle n'existe pas.
    N√©cessite la biblioth√®que Pillow (PIL).
    """
    try:
        from PIL import Image, ImageDraw
        if not os.path.exists(IMAGE_PATH):
            print(f"üñºÔ∏è  L'image '{IMAGE_PATH}' n'existe pas, g√©n√©ration en cours...")
            # Cr√©e une image simple : un carr√© rouge sur fond blanc
            img = Image.new('RGB', (200, 200), color = 'white')
            draw = ImageDraw.Draw(img)
            draw.rectangle([50, 50, 150, 150], fill='red', outline='black')
            img.save(IMAGE_PATH)
            print("‚úÖ Image d'exemple g√©n√©r√©e.")
    except ImportError:
        print("‚ö†Ô∏è  Avertissement: La biblioth√®que Pillow n'est pas install√©e.")
        print("   Veuillez installer 'Pillow' (`pip install Pillow`) pour g√©n√©rer l'image d'exemple,")
        print(f"   ou placez manuellement un fichier nomm√© '{IMAGE_PATH}' dans ce r√©pertoire.")
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration de l'image: {e}")


# --- Logique principale ---

def run_vision_test():
    """
    Fonction principale qui ex√©cute le sc√©nario de test de vision.
    """
    if not API_KEY:
        print("‚ùå Erreur: La variable d'environnement API_KEY n'est pas d√©finie.")
        return

    # G√©n√©rer l'image d'exemple si n√©cessaire
    generate_example_image()

    # Encoder l'image en base64
    base64_image = encode_image_to_base64(IMAGE_PATH)
    if not base64_image:
        return

    print(f"ü§ñ Mod√®le utilis√© : {MODEL}")
    print(f"üñºÔ∏è Image envoy√©e : {IMAGE_PATH}")
    print("-" * 30)

    # Construction du payload au format multimodal
    payload = {
        "model": MODEL,
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "Que vois-tu sur cette image ? D√©cris la forme et la couleur principale."
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/png;base64,{base64_image}"
                        }
                    }
                ]
            }
        ],
        "max_tokens": 500 # Limiter la longueur de la description
    }

    print("‚û°Ô∏è Envoi de la requ√™te au LLM de vision...")
    try:
        with httpx.Client() as client:
            response = client.post(
                f"{API_URL}/chat/completions",
                headers={"Authorization": f"Bearer {API_KEY}"},
                json=payload,
                timeout=120, # Les mod√®les de vision peuvent √™tre plus longs
            )
            response.raise_for_status()
            response_data = response.json()

    except httpx.HTTPStatusError as e:
        print(f"‚ùå Erreur API (HTTP Status): {e}")
        print(f"R√©ponse de l'API : {e.response.text}")
        return
    except httpx.RequestError as e:
        print(f"‚ùå Erreur API (Request): {e}")
        return

    final_answer = response_data["choices"][0]["message"]["content"]
    print("\n‚úÖ R√©ponse du mod√®le :")
    print(f"üí¨ \"{final_answer}\"")


if __name__ == "__main__":
    run_vision_test()
